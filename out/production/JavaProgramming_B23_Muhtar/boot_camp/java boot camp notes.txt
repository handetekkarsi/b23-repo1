Java Boot Camp

	Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Array
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations
		17. OOP Inheritance
		18. Method Overriding
		19. Final keyword
		20. OOP Abstraction
		21. Abstract Class vs Interface
		22. OOP Polymorphism
		23. Reference Type Castings: Upcasting vs DownCasting
		24. Exceptions: checked & unchecked
		25. Exception Handlings
		26. final vs finally vs finalize
		27. garbage collection & garbage collector
		28. Collections: List, Set
		29. Iterable & Iterator
		30. Maps



1. Primitives:  byte < short < int < long < float < double
				char, boolean 

				byte a = 12;


2. primitive casting:
		
		implicit casting: casting smaller primitive type to larger primitive type

				short s = 10;
				long l = s;

		explicit casting: casting larger primitive type to smaller

				int x = 100;
				byte y = (byte)x;


3. Wrapper Classes: the objects type of the primitives.

		Byte, Short, Integer, Long, Float, Double, Character, Boolean

		autoboxing: primitive to object
		unboxing: object to primitive


4. String: Immutable version of char sequences
		
		substring(), charAt(), lowerCase&upperCase(),  replace(), contains(), equals()...

5. StringBuilder & StringBuffer: mutable version of char sequences

		StringBuilder: not Synchronized

		StringBuffer: slower, synchronized ===> Thread-Safe


6. Loops: repeating
		
		for loop: if the number of iteration is fixed

					 int i = 0;        i < 10;		i++
				for(initialization;  Conidition;  Iterator){

				}



		while loop: if the number of iteration is NOT fixed

				while(result.hasNext()){

				}


		do-while loop: at least gets executed once, even if the condition is false


7. Array: size is fixed. fast
		 supports both primitives & non-primitives
		 can be multi-dimensional


8. for each loop: there must be a data structure
				  Iteration order is fixed

				  for(DataType  name  : Data Structure){

				  }


9. Custom Methods:  Function. Grouping the code fragements to perform a task
				
				improves the reusability of our codes

			declare:
				AM  Specifier  ReturnType  MethodName(Parameter){
						Code Fragments;
				}


10. Method Overloading: multiple methods sharing the same method name
						Method name must be same, parameters MUST be different


11. Constructor: Special Methods. Name MUST be same with class name
				used for creating the objects of the class

				execution depdends on the object

				

				Declare:
					AM  ClassName(Parameter){
						Codes;
					}


				object:
					new Constructor()


			BasePage:

				public BasePage(){
					PageFactory.InitElements( driver,  this);
				}


				@FindBy


			HomePage extends Basepage



12. Class & Object: class is a template of objects, where the objects came from, specifies what object should contain.
					Object is instance of a class, each object has its own memory


13. Static VS Instance: 
			
			instance: belongs to the object. there are multiple copies, each object has its own copy

			static: belongs to the class. there is ONLY one copy for all the objects of the class



14. Import Statements:
		
		regualr imports:

			import package.class;
			import package.*;


		static imports: only imports static members

			import static package.class.staticMember;
			import static package.class.*;


15. Access Modifiers:  private < default < protected < public

		private: visible within the class only
		default: visible within the same package
		protected: visible within the same package, also visible outside package in subclass
		public: Always visible



16. OOP: Object Oreinted Programming
		
		code reusability
		less duplication
		less memory usage
		centralized structure
		easy to maintain


	Encapsulation: data hiding by giving privtae access modifier

					use public getter/setter to read/write the private data

					Getter: Read ONLY
							returns the value of the private data
							no parameters

					Setter: Write ONLY
							returnType is void
							passes a parameter


		in my framework I used encapsulation in POJO class ...


17. OOP Inheritance: Building Parent & child (super/sub, IS A) relations between classes/interface
		
			 sub                super
		Class X  extends  Class Y

		Class Z extends Class Y


		sub class: inherits all the visible variables & methods from super class

		super class: can not inherit anything from sub class
				

		A class can only extend one class

		A class can be extended by multiple classes


		BasePage
			public BasePage(){
					PageFactory.InitElements( driver,  this);
				}

			LogInPage extends BasePage

			HomePage extends BasePage

			...



		TestBase

			@BeforeMethod{
				Open Browser
				Maximize Browser
				Implicitwaait
				navigateToURL

			}


			@AfterMethod{

				close the browser

				If test Failed:
					screenshot, report....

			}


	   TestClass1 extends TestBase

	   TestClass2 extends TestBase

	   TestClass3 extends TestBase

	   ....


18. Method Overriding: giving different implementations to the methods
					   
					   MUST happen in subclass
					   Method name, parameters, returnType MUST be same
					   Access modifier need to be same or more visible

					   we can not override: final, static, private methods


19. Final keyword: unchangable
		
		variables: can not be reassigned

		methods: can not be overriden

		class: can not inherited


20. OOP Abstraction: hiding the implementation and details
					
					put the focus on essentials, not worry about the details

					Abstract method: does not have implementation. without the body
									 meant to be overriden ( can not be final, static, private).

				2 ways:
					
					1. Abstract class: meant to be parent class (can not be final)

										can not create objects. 

										methods: All the methods + abstract methods

										variables: All the variables


					2. Interface: blueprint of the class, provides the additional methods the classes need.
								  meant to be implemented (can not be final)

								  public is the ONLY access modifier

								  methods: default methods, static methods, abstract methods

								  variables: static & final by default


					TakeScreenShot
					JavaScriptExecuter
					WebDriver
					List
					Set
					Map
					...




21. Abstract Class vs Interface:
				
				one class can extend one abstract class
				one class can implement multiple interfaces
				one interface can extend multiple interfaces




22. OOP Polymorphism: ability of the object taking on many forms
					 	
				 	  parent class/interface being reference to child objects

				 	  reference type decides what we can call

				 	  object type decides which implementation to be executed



				 	  WebDriver driver = new ChromeDriver();
				 	  Map map = new HashMap()
				 	  List list = new ArrayList();
				 	  Set set = new HashSet();


				 	  Driver:

				 	  		WebDriver	get(){

				 	  			return ChromeDriver;

				 	  			return FireFoxDriver

				 	  		}



23. Reference Type Castings: There MUST be IS A relation

			upcasting: casting smaller type to larger type. (done implicitly)

				List list = new ArrayList();

			downcasting: casting larger tpe to smaller type. (done explicitly)

				List list = new ArrayList();

				( (ArrayList)list )


			WebDriver driver = new ChromeDriver();

			( (ChromeDriver)driver ).takeScreenShoot()

			( (TakeScreenShot)driver).takeScreenShoot()


			driver instanceof FireFoxDriver ==> false
			driver instanceof ChromeDriver ===> true



24. Exceptions: checked & unchecked
		
		unchecked: occurs during the run time

		checked: occurs during the compile time

	throw: manually creating the exception


25. Exception handlings:
			
		1. try & catch: blocks, can handle both checked & unchecked exception

					try{
						exceptioncode
					}catch(ExceptionType e){
						e.printStackTrace();
					}



		2. throws: can only handle checked exception.  in method signature.

					caller of the method still need to handle the exception



26. final vs finally vs finalize
		
		final: keyword, can be applied to class, methods, and variables

		finally: block, can created with try&catch blocks. 

		finalize: method, garbage collector calls this methods before destroyinng un referenced objects





27. garbage collection: where all the unreferenced object goes to.
		
			unreferenced object:

				1. assign null:

						String str = "java"; // eligible for garbage collection
							str = null;


				2. reassign a new object

					String str = "java"; // eligible for garbage collection
					str = "Python";



28. Collections: Size is dynamic, ONLY supports non-primitives

		List (I): accepts duplicates, has index

			ArrayList (C): searching the element is faster. (get())

			LinkedList (C): inserting and removing elements are faster. (add function & remove functions)

			Vector (C): Slower, Synchronized ==> thread-safe

			Stack (C): Slower, Synchronized ==> thread-safe. LIFO


			findElements() ===> List<WebElement>
			getOptions() =====> List<WebElement>


		Set (I): does not accept duplicates, deos not have index

			HashSet (C): fastest. order is not guaranted

			LinkedHash (C): keeps the insertion order

			TreeSet (C): ascending order


			getWindowHandles()  ====> Set<String>




30. Maps:  Key & Value, key can not be duplicated, value can be duplicated. only support non-primitives
		
		HashMap (C): Fastest. accepts null, order is not guaranteed.

		LinkedHashMap (C): accepts null, keeps the insertion order

		HashTable (C): does not accept null, is synchronized

		TreeMap (C): does not accept null, ascending order


	POJO..
	properties file

	






